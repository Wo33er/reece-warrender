<div class="content-main">
  <div id="completions" {{#if static}} style="width: 750px; margin: 0 auto; display: block;" {{/if}}>
    {{#each gamingData }}
      <div class="completion-game">
        <div class="completion-title-card">
          <div class="completion-title-year">
            <span data-shadow-text="Year: {{ year }}">Year: {{ year }}</span>
          </div>
          <div class="completion-title-count">{{ this.games.length }} Games Completed</div>
        </div>
      </div>
      {{#each this.games }}
        <div id="{{ cleanString title }}" class="completion-game lazy hover" style="background-image:url('/images/games/{{ cleanString title }}.jpg')">
          <div class="completion-game-title">
            <div class="completion-game-title-text">{{ addOne @key }} - {{ title }}</div>
          </div>
          <div class="completion-game-details">
            <div class="completion-game-header">
              <div class="completion-game-header-date">{{ title }}<div class="completion-game-review-rating completion-game-review-stars-{{ rating }}"></div></div>
              <div class="completion-game-header-details">
                {{ date }}
                <span>{{ platform }}  ~ {{ duration }}</span>
              </div>
            </div>
            <div class="completion-game-review">
              <div class="completion-game-review-body">
                {{ review }}
              </div>
            </div>
          </div>
        </div>
      {{/each}}
    {{/each}}
  </div>
</div>

<script>
// Lazy image loading
document.addEventListener("DOMContentLoaded", function() {
  var lazyloadImages;    

  if ("IntersectionObserver" in window) {
    lazyloadImages = document.querySelectorAll(".lazy");
    var imageObserver = new IntersectionObserver(function(entries, observer) {
      entries.forEach(function(entry) {
        if (entry.isIntersecting) {
          var image = entry.target;
          image.classList.remove("lazy");
          imageObserver.unobserve(image);
        }
      });
    });

    lazyloadImages.forEach(function(image) {
      imageObserver.observe(image);
    });
  } else {  
    var lazyloadThrottleTimeout;
    lazyloadImages = document.querySelectorAll(".lazy");
    
    function lazyload () {
      if(lazyloadThrottleTimeout) {
        clearTimeout(lazyloadThrottleTimeout);
      }    

      lazyloadThrottleTimeout = setTimeout(function() {
        var scrollTop = window.pageYOffset;
        lazyloadImages.forEach(function(img) {
            if(img.offsetTop < (window.innerHeight + scrollTop)) {
              img.src = img.dataset.src;
              img.classList.remove('lazy');
            }
        });
        if(lazyloadImages.length == 0) { 
          document.removeEventListener("scroll", lazyload);
          window.removeEventListener("resize", lazyload);
          window.removeEventListener("orientationChange", lazyload);
        }
      }, 20);
    }

    document.addEventListener("scroll", lazyload);
    window.addEventListener("resize", lazyload);
    window.addEventListener("orientationChange", lazyload);
  }
})
</script>